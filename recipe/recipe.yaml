# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
context:
  version: "3.3.3"
  # jax upstream does not support anymore Python 3.9
  # See https://github.com/conda-forge/jax-feedstock/pull/156
  python_min: "3.10"


recipe:
  name: mujoco-split
  version: ${{ version }}

source:
  - url: https://github.com/deepmind/mujoco/archive/refs/tags/${{ version }}.tar.gz
    sha256: db05b995b7711412f7e9114e04177cb5dae83d667212535f7cf1706bf185a2cc
    patches:
      - patches/0001-python_remove_avx.patch
      - patches/0002-cxx_devendor.patch
      - patches/0003-python_devendor.patch
      - patches/0004-ccd_vec3_origin_link_problem.patch
      - patches/0005-disable_copy_cxx_files_in_python_package.patch
      - patches/0006-do_not_install_via_pip.patch
      - patches/0007-unvendor_simulate.patch
      - patches/0008-workaround_cmake_19072.patch
      - patches/0009-619bis.patch
      - patches/0010-simulate_unvendor_lodepng.patch
      - patches/0011-Disable-isolation-and-dependency-check-in-python-bui.patch
      - patches/0012-Add-MUJOCO_SAMPLE_COMMAND_PREFIX-to-add-prefix-to-OU.patch
      - patches/0013-Add-optional-prefix-for-simulate-command.patch
      - patches/0014-Add-options-to-enable-or-disable-installation-of-muj.patch
      - patches/0015-CMake-use-CMAKE_REQUIRED_LINK_OPTIONS-instead-of-CMA.patch
      - patches/0016-Add-MSYS-as-a-Windows-platform.patch

build:
  number: 0

outputs:
  - package:
      name: libmujoco
    build:
      script:
        - if: unix
          then: build_cxx.sh
        - if: win
          then: bld_cxx.bat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - if: linux or osx
          then:
            - make
        - ninja
        - if: win
          then:
            - clang 16.*
            - lld 16.*
            - llvm-tools 16.*          # provides llvm-lib
      host:
        - eigen
        - qhull
        - tinyxml2
        - libccd-double
        - libabseil
        - lodepng
      run_exports:
        - ${{ pin_subpackage("libmujoco", upper_bound="x.x.x") }}
      run_constraints:
        # Older version of this package were named mujoco-cxx, we want to avoid that they are installed
        - mujoco-cxx <0
      ignore_run_exports:
        # libabseil is used only for tests, we can
        # safely ignore its run_exports
        from_package:
          - libabseil
    tests:
      # Header and core shared library via rattler-build helper
      - package_contents:
          include:
            - mujoco/mujoco.h
          lib:
            - mujoco
      # Manual checks for plugins (needed on Windows where there is no .lib)
      - script:
          - if: unix
            then:
              - test -f ${PREFIX}/bin/mujoco_plugin/libactuator${SHLIB_EXT}
              - test -f ${PREFIX}/bin/mujoco_plugin/libelasticity${SHLIB_EXT}
              - test -f ${PREFIX}/bin/mujoco_plugin/libsensor${SHLIB_EXT}
              - test -f ${PREFIX}/bin/mujoco_plugin/libsdf${SHLIB_EXT}
          - if: win
            then:
              - if not exist %LIBRARY_BIN%\mujoco_plugin\actuator.dll exit 1
              - if exist     %LIBRARY_BIN%\mujoco_plugin\actuator.lib exit 1
              - if not exist %LIBRARY_BIN%\mujoco_plugin\elasticity.dll exit 1
              - if exist     %LIBRARY_BIN%\mujoco_plugin\elasticity.lib exit 1
              - if not exist %LIBRARY_BIN%\mujoco_plugin\sensor.dll exit 1
              - if exist     %LIBRARY_BIN%\mujoco_plugin\sensor.lib exit 1
              - if not exist %LIBRARY_BIN%\mujoco_plugin\sdf.dll exit 1
              - if exist     %LIBRARY_BIN%\mujoco_plugin\sdf.lib exit 1

  # -------------------------------------------------------------------------
  # Command-line samples
  # -------------------------------------------------------------------------
  - package:
      name: mujoco-samples
    build:
      script:
        - if: unix
          then: build_samples.sh
        - if: win
          then: bld_samples.bat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - ninja
      host:
        - if: linux
          then:
            - libgl-devel
        - ${{ pin_subpackage("libmujoco", exact=True) }}
        - glfw
      run:
        # Somehow the libmujoco run_exports is ignored here, let's add explicitly the run dependency
        - ${{ pin_subpackage("libmujoco", upper_bound="x.x.x") }}
    tests:
      - package_contents:
          bin:
            - mujoco-testspeed
      - script:
          - if: unix
            then: test ! -f "$PREFIX/bin/testspeed"
          - if: win
            then: if exist %LIBRARY_BIN%\testspeed.exe exit 1

  - package:
      name: mujoco-simulate
    build:
      script:
        - if: unix
          then: build_simulate.sh
        - if: win
          then: bld_simulate.bat
    requirements:
      build:
        - cmake
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - ninja
      host:
        - if: linux
          then:
            - libgl-devel
        - ${{ pin_subpackage("libmujoco", exact=True) }}
        - glfw
      run:
        # Somehow the libmujoco run_exports is ignored here, let's add explicitly the run dependency
        - ${{ pin_subpackage("libmujoco", upper_bound="x.x.x") }}
    tests:
      - package_contents:
          bin:
            - mujoco-simulate
      - script:
          - if: unix
            then: test ! -f "$PREFIX/bin/simulate"
          - if: win
            then: if exist %LIBRARY_BIN%\simulate.exe exit 1

  - package:
      name: mujoco-python
    build:
      script:
        - if: unix
          then: build_py.sh
        - if: win
          then: bld_py.bat
    requirements:
      build:
        - ${{ compiler('c') }}
        - ${{ stdlib('c') }}
        - ${{ compiler('cxx') }}
        - if: linux or osx
          then:
            - make
            - bash
        - if: win
          then:
            - ninja
            - clang 16.*
            - lld 16.*
            - llvm-tools 16.*
            - posix
        - cmake
        - if: build_platform != target_platform
          then:
            - python
            - cross-python_${{ target_platform }}
            - numpy
            - pip
            - setuptools
            - python-build
            - virtualenv
            - absl-py
      host:
        - ${{ pin_subpackage("libmujoco", exact=True) }}
        - eigen
        - libabseil
        - lodepng
        - python
        - pip
        - setuptools
        - python-build
        - virtualenv
        - pybind11
        - pybind11-abi
        - numpy
        - absl-py
        - glfw
        - pyglfw
        - pyopengl
        - if: linux
          then:
            - libgl-devel
      run:
        - ${{ pin_subpackage("libmujoco", exact=True) }}
        - python
        - numpy
        - absl-py
        - pyglfw
        - pyopengl
        - if: py != 38 and py != 39
          then:
            - etils
        - if: py == 38
          then:
            - etils <=1.3.0
        - if: py == 39
          then:
            - etils <=1.5.1
        - fsspec
        - importlib_resources
        - typing_extensions
        - zipp
    tests:
      - python:
          imports:
            - mujoco

      - script:
          - if: linux
            then: |
              # test_delete and test_load_xml disabled due to https://github.com/google-deepmind/mujoco/pull/2160
              # EGL driver in centos7 has some problems when running on Azure, so we use osmesa for now on Linux
              export MUJOCO_GL=osmesa
              pytest --pyargs mujoco -v -k "not (test_delete or test_load_xml)"
              pip check
          - if: osx
            then: |
              # On macOS and Linux the Azure runners can't load opengl and mujoco does not support loading osmesa
              # on this platforms, so we pass MUJOCO_GL disable there
              export MUJOCO_GL=disable
              pytest --pyargs mujoco -v -k "not (test_delete or test_load_xml)"
              pip check
              # Regression test for https://github.com/conda-forge/mujoco-feedstock/issues/64
              # Commented out until it is fixed, see https://github.com/conda-forge/mujoco-feedstock/pull/85#issuecomment-2953716989
              # mjpython --version
          - if: win
            then: |
              set MUJOCO_GL=disable
              pytest --pyargs mujoco -v -k "not (test_delete or test_load_xml)"
              pip check
        requirements:
          run:
            - pytest
            - pip
            - if: linux or osx
              then:
                - mesalib

  - package:
      name: mujoco-mjx
    build:
      noarch: python
      skip:
        # Skip platforms for which jax is not available
        - if: win
          then: true
        - if: ppc64le
          then: true
        # Skip platforms for which for some reason the test is failing for not finding mujoco-python,
        # even if it the mujoco-python was just build
        - if: arm64
          then: true
        # We only build for python_min otherwise the test will fail
        - if: py < python_min
          then: true
      # jax upstream does not support anymore Python 3.9
      # See https://github.com/conda-forge/jax-feedstock/pull/156
      script: python -m pip install ./mjx/ --no-deps -vv
    requirements:
      host:
        - pip
        - setuptools
        - python ${{ python_min }}.*
      run:
        - python >=${{ python_min }}
        - jaxlib >=0.4.13
        - jax >=0.4.13
        - absl-py
        - scipy
        - trimesh
        - mujoco-python >=${{ version }}
        - etils
        - fsspec
        - importlib_resources
        - typing_extensions
        - zipp
    tests:
      - python:
          imports:
            - mujoco.mjx
      - script: |
          # Skipping test_box_box as it also fails upstream https://github.com/conda-forge/mujoco-feedstock/pull/31#issuecomment-1770520403
          # Skipping test_collision_driver tests to speed up the tests and as some integration tests make the remote runner crash/hang
          pip check
          pytest --pyargs mujoco.mjx -v -k "not (test_collision_driver or test_box_box)"
        requirements:
          run:
            - pip
            - pytest
            - python ${{ python_min }}.*

  - package:
      name: mujoco
    requirements:
      run:
        - ${{ pin_subpackage("libmujoco", exact=True) }}
        - ${{ pin_subpackage("mujoco-samples", exact=True) }}
        - ${{ pin_subpackage("mujoco-simulate", exact=True) }}
        - ${{ pin_subpackage("mujoco-python", upper_bound="x.x.x") }}
    tests:
      - python:
          imports:
            - mujoco

about:
  homepage: https://github.com/deepmind/mujoco
  license: Apache-2.0
  license_file:
    - LICENSE
    - build_cxx/_deps/tinyobjloader-src/LICENSE
    - build_cxx/_deps/sdflib-src/LICENSE
  summary: "Multi-Joint dynamics with Contact (MuJoCo): physics engine, CLI tools, GUI, Python bindings, and MJX."
extra:
  recipe-maintainers:
    - traversaro
